@page "/QrGenerador"
@using QRCoder
@using System.IO
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow-lg p-4 text-center" style="max-width: 400px; border-radius: 15px;">
        <h3 class="mb-3">Generar Código QR</h3>

        <input @bind="qrText" placeholder="Número de cliente" class="form-control text-center mb-3" />

        @if (qrCodeImage != null)
        {
            <div class="d-flex justify-content-center mb-3">
                <img src="@qrCodeImage" alt="QR Code" class="img-fluid shadow-lg p-2 rounded" style="max-width: 200px;" />
            </div>

            <button class="btn btn-primary w-100 mb-2" @onclick="DescargarQR">📥 Descargar QR</button>
        }

        <button class="btn btn-success w-100" @onclick="GenerateQRCode">🔄 Generar QR</button>
    </div>
</div>

@code {
    private string qrText = string.Empty;
    private string? qrCodeImage;
    private byte[]? qrCodeImageBytes;

    private void GenerateQRCode()
    {
        if (string.IsNullOrWhiteSpace(qrText))
        {
            return;
        }

        using (var qrGenerator = new QRCodeGenerator())
        using (var qrCodeData = qrGenerator.CreateQrCode(qrText, QRCodeGenerator.ECCLevel.Q))
        using (var qrCode = new PngByteQRCode(qrCodeData))
        {
            qrCodeImageBytes = qrCode.GetGraphic(20);
            qrCodeImage = $"data:image/png;base64,{Convert.ToBase64String(qrCodeImageBytes)}";
        }
    }

    private async Task DescargarQR()
    {
        if (qrCodeImageBytes != null)
        {
            string fileName = $"QR_{qrText}.png";
            await JSRuntime.InvokeVoidAsync("descargarArchivoQr", fileName, qrCodeImageBytes);
        }
    }
}
