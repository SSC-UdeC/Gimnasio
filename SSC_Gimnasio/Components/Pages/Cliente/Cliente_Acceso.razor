@page "/"
@using SSC_Gimnasio.Modelos
@inject SSC_Gimnasio.Repositorios.IRepositorioClientes RepositorioClientes
@inject SSC_Gimnasio.Repositorios.IRepositorioVisitas RepositorioVisitas
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container text-center mt-1">
    <h3 class="mb-4">Acceso del cliente</h3>

    @if (!EscaneoExitoso)
    {
        <button class="btn btn-lg btn-primary mb-3 px-4 py-2" style="border-radius: 10px;" type="button" @onclick="(() => ShowScanBarcode = !ShowScanBarcode)">
            📷 Escanear Código
        </button>
    }

    @if (ShowScanBarcode && !EscaneoExitoso)
    {
        <div class="d-flex justify-content-center">
            <BarcodeReader ScanResult="HandleScanResult"
                           Close="(() => ShowScanBarcode = !ShowScanBarcode)"
                           ScanBtnTitle="Escanear"
                           ResetBtnTitle="Reset"
                           CloseBtnTitle="Cerrar" />
        </div>
    }

    @if (cliente != null)
    {
        <div class="card shadow-lg p-4 mt-3" style="max-width: 400px; margin: auto; border-radius: 15px;">
            <h4 class="text-dark">Hola @cliente.Nombre, Bienvenido al Gimnasio</h4>
            <p class="text-muted"><strong>Correo:</strong> @cliente.Email</p>
            <p class="text-muted"><strong>Teléfono:</strong> @cliente.Telefono</p>
            <p class="text-muted"><strong>Expiración de Membresía:</strong> @cliente.Fecha_Vencimiento.ToString("dd/MM/yyyy")</p>

            @if (MembresiaExpirada)
            {
                <p class="text-danger"><strong>Membresía expirada. Por favor, pase a renovar.</strong></p>
            }
            else if (UltimoDiaMembresia)
            {
                <p class="text-warning"><strong>Hoy es su último día de membresía. ¡No olvide renovarla!</strong></p>
            }
            else
            {
                <p class="text-success"><strong>Membresía vigente. ¡Disfrute su entrenamiento!</strong></p>
            }
        </div>
    }

    @if (error != null)
    {
        <p class="text-danger mt-3">@error</p>
    }

    @if (resultado != null)
    {
        <p class="mt-3 text-success"><strong>Resultado del Escaneo:</strong> @resultado</p>
    }
</div>

@code {
    bool ShowScanBarcode { get; set; } = false;
    bool EscaneoExitoso { get; set; } = false;
    private Clientes? cliente;
    private string? error;
    private string? resultado;

    bool MembresiaExpirada => cliente?.Fecha_Vencimiento < DateTime.Today;
    bool UltimoDiaMembresia => cliente?.Fecha_Vencimiento == DateTime.Today;

    private async Task HandleScanResult(string scannedCode)
    {
        if (int.TryParse(scannedCode, out int clientId))
        {
            cliente = await RepositorioClientes.Get(clientId);
            if (cliente != null)
            {
                error = null;
                EscaneoExitoso = true;
                ShowScanBarcode = false;

                // Guardar visita en la base de datos
                await RegistrarVisita(cliente);

                StateHasChanged();
                await Task.Delay(5000);
                await JSRuntime.InvokeVoidAsync("location.reload");
            }
            else
            {
                error = "Cliente no encontrado.";
                cliente = null;
            }
        }
        else
        {
            error = "Código inválido.";
            cliente = null;
            resultado = null;
        }
    }

    private async Task RegistrarVisita(Clientes cliente)
    {
        var nuevaVisita = new Visitas
            {
                Id_Cliente = cliente.Id_Cliente,
                Fecha_Visita = DateTime.Now
            };

        await RepositorioVisitas.Add(nuevaVisita);
    }
}
