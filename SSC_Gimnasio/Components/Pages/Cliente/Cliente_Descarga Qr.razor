@page "/descarga-cliente/{ClienteId:int}"
@inject SSC_Gimnasio.Repositorios.IRepositorioClientes RepositorioClientes
@using SSC_Gimnasio.Modelos
@using QRCoder
@using System.IO
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container text-center mt-4">
    <h3 class="mb-4">Cliente registrado exitosamente</h3>

    @if (cliente != null)
    {
        <div class="card shadow-lg p-4 mt-3" style="max-width: 400px; margin: auto; border-radius: 15px;">
            <h4 class="text-dark">Bienvenido @cliente.Nombre</h4>
            <p class="text-muted"><strong>Correo:</strong> @cliente.Email</p>
            <p class="text-muted"><strong>Teléfono:</strong> @cliente.Telefono</p>
            <p class="text-muted"><strong>Expiración de Membresía:</strong> @cliente.Fecha_Vencimiento.ToString("dd/MM/yyyy")</p>
        </div>

        @if (qrCodeImage != null)
        {
            <div class="mt-3">
                <img src="@qrCodeImage" alt="QR Code" class="img-fluid shadow-lg p-2 rounded" style="max-width: 200px;" />
            </div>
        }

        <button class="btn btn-lg btn-primary mt-3 px-4 py-2" style="border-radius: 10px;" @onclick="DescargarQR">Descargar QR</button>
    }
    else
    {
        <p class="text-danger">No se encontró el cliente.</p>
    }
</div>

@code {
    [Parameter] public int ClienteId { get; set; }
    private Clientes? cliente;
    private string? qrCodeImage;
    private byte[]? qrCodeImageBytes;

    protected override async Task OnInitializedAsync()
    {
        cliente = await RepositorioClientes.Get(ClienteId);
        if (cliente != null)
        {
            GenerarQRCode(cliente.Id_Cliente.ToString());
        }
    }

    private void GenerarQRCode(string qrText)
    {
        using (var qrGenerator = new QRCodeGenerator())
        using (var qrCodeData = qrGenerator.CreateQrCode(qrText, QRCodeGenerator.ECCLevel.Q))
        using (var qrCode = new PngByteQRCode(qrCodeData))
        {
            qrCodeImageBytes = qrCode.GetGraphic(20);
            qrCodeImage = $"data:image/png;base64,{Convert.ToBase64String(qrCodeImageBytes)}";
        }
    }

    private async Task DescargarQR()
    {
        if (qrCodeImageBytes != null)
        {
            string fileName = $"Llave_QR_{cliente.Nombre.Replace(" ", "_")}.png";
            await JSRuntime.InvokeVoidAsync("descargarArchivoQr", fileName, qrCodeImageBytes);
        }
    }
}
